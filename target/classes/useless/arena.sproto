#竞技场时间信息
.ArenaTimeInfo
{
	seasonID     0 : integer         #赛季ID
	seasonBegin  1 : integer         #赛季开始时间
	seasonEnd    2 : integer         #赛季结束时间
	nextFight    3 : integer         #下次战斗时间，如果为0，表示现在可以进行匹配，如果不为0，表示下场战斗的开始时间
}

#竞技场个人信息
.ArenaPlayerInfo
{
	grade        0 : integer         #段位，如果为0表示无段位
	score        1 : integer         #积分
	rank         2 : integer         #段位排行，如果为0表示未上榜
	challenge    3 : integer         #当天挑战次数
	wins         4 : integer         #胜利次数（失败次数为challenge - wins）
	hasGrade     5 : integer         #是否有段位目标奖励（UI上的宝箱红点提示，赛季内战斗场数）
	hasTarget    6 : integer         #是否有赛季目标奖励（UI上的赛季目标奖励红点提示）
	curMatch     7 : integer         #当前正在运行的匹配，本次匹配开始的时间戳
	totalChaNum  8 : integer         #每天允许挑战的总次数，可以读配置，应客户端强烈要求添加
	weekGrade    9 : integer         #上周结算时的段位
}

#竞技场信息
.ArenaInfo
{
	timeInfo     0 : ArenaTimeInfo   #竞技场的时间信息
	playerInfo   1 : ArenaPlayerInfo #竞技场的玩家信息
	matchStatus  2 : integer         #竞技场匹配的状态，0表示不再匹配中，1表示是单人匹配，2表示是多人匹配
}

#获取竞技场信息请求
.C2G_GET_ARENA_INFO
{

}

#服务器返回竞技场信息
.G2C_GET_ARENA_INFO
{
	arenaInfo    0 : ArenaInfo        #竞技场信息
}

#匹配请求（客户端发到服务器），返回G2C_ARENA_MATCH
.C2G_ARENA_MATCH
{
	matchType    0 : integer          #匹配类型，0表示单人匹配，1表示组队匹配
	isMatch      1 : integer          #1表示匹配，0表示取消匹配
	enforce      2 : integer          #1表示强制执行，只有在组队匹配的时候有效，表示忽略所有组队邀请。0表示非强制执行
}

#匹配请求结果，这个消息是只发给发送C2G_ARENA_MATCH的客户端
.G2C_ARENA_MATCH
{
	result       0 : string           #结果值 "RESULT_OK"表示成功
	matchType    1 : integer          #匹配类型，0表示单人匹配，1表示组队匹配
	isMatch      2 : integer          #1表示匹配，0表示取消匹配
	memberName   3 : string           #如果匹配不成功，则表示引起匹配失败的玩家名字
}

#组队发起匹配通知（当队长开始组队，服务器验证通过后就给所有的队员广播这个消息）
.G2C_ARENA_TEAM_MATCH
{
	chiefName    0 : string           #发起组队匹配的队长的名字
}

#队员是否同意进行挑战，返回通用结果3001
.C2G_ARENA_MATCH_TEAM_OPERATE
{
	opType       0 : integer          #0表示不同意进行组队匹配，1表示同意组队匹配
}

#当队员响应组队匹配之后，向队伍里所有的人发送响应的结果
.G2C_ARENA_MATCH_TEAM_OPERATE
{
	opType       0 : integer
	memberID     1 : integer
	memberName   2 : string
}

#用于匹配状态的更新通知，用于如下场景
#1. 当组队匹配，所有队员都同意的时候，该消息会发送给队伍的所有成员，并且matchStatus为1
#2. 当组队匹配，有队员不同意匹配时，该消息会发送给队伍的队长，提示匹配失败，及原因
#3. 从匹配状态中退出，会发给匹配的玩家，通知匹配退出的原因
.G2C_ARENA_MATCH_NOTIFY
{
	matchStatus  0 : integer          #1表示匹配，0表示取消匹配
	reason       1 : string           #表示引起该状态的原因，matchStatus为1的时候，该字段不需要
	memberName   2 : string           #表示引起该状态的玩家名字，matchStatus为1的时候，该字段不需要
}

#竞技场单人统计信息
.ArenaPlayerResult
{
	playerID     0 : integer          #玩家ID
	playerName   1 : string           #玩家姓名
	kills        2 : integer          #杀敌数
	deaths       3 : integer          #被杀数
	damages      4 : integer          #造成的伤害值
}


#竞技场的玩家分组信息，断线重连也发送这个消息
.G2C_ARENA_PLAYER_TEAM
{
	team1Info    0 : *ArenaPlayerResult     #队伍1的统计信息
	team2Info    1 : *ArenaPlayerResult     #队伍2的统计信息
	timeLeft     2 : integer                #竞技场剩余时间
}

#竞技场击杀通知
.G2C_ARENA_KILL
{
	killer       0 : integer          #击杀者ID
	victim       1 : integer          #被击杀者ID
	killerName   2 : string           #击杀者姓名
	victimName   3 : string           #被击杀者姓名
	victimCombo  4 : integer          #被杀者的combo数
	killerCombo  5 : integer          #击杀者的combo数
}

#离开竞技场战斗，返回3001
.C2G_QUIT_ARENA_FIGHT
{
	
}

#结算信息
.ArenaResult
{
	team1Res     0 : *ArenaPlayerResult    #队伍1的挑战结果
	team2Res     1 : *ArenaPlayerResult    #队伍2的挑战结果
	fightResult  2 : integer               #挑战结果，结果枚举值参见SC_CharConst.ArenaResult
	scoreChange  3 : integer               #本次挑战的积分变化
	hasReward    4 : integer               #本次结算是否有奖励 0表示没有奖励，1表示有奖励（有奖励不用）
}

#比赛结束后返回结算信息
.G2C_ARENA_RESULT
{
	result       0 : ArenaResult      #竞技场结算信息
}

#获取赛季目标奖励信息请求
.C2G_GET_SEASON_TARGET_REWARDS
{
	
}

#赛季目标奖励信息
.ArenaSeasonTargetReward
{
	targetID     0 : integer          #奖励的ID
	targetType   1 : integer          #奖励的目标的类型，1表示挑战次数，2表示赛季获得声望值
	targetLimit  2 : integer          #奖励的目标的限制数量
	status       3 : integer          #奖励的状态，1表示可领取，2表示未达成，3表示已领取
}

#获取赛季目标奖励信息回应
.G2C_GET_SEASON_TARGET_REWARDS
{
	seasonChallengeCount  0 : integer                  #赛季挑战次数
	seasonPrestige        1 : integer                  #赛季获得积分数量
	rewards               2 : *ArenaSeasonTargetReward #赛季奖励
}

#领取赛季目标奖励的请求，返回3001，增加的奖励信息由common.sproto中的物品跟新消息来通知
.C2G_TAKE_SEASON_TARGET_REWARD
{
	targetRewardID        0 : integer #赛季目标奖励ID
}

#DB中加载玩家每周积分信息回应
.D2B_GET_ARENA_WEEK_SCORE
{
	ids                   0 : *integer  #玩家IDs
	scores                1 : *integer  #玩家分数
}

#排行中的角色信息	
.CharInfo
{
	charId 0 : integer  #角色ID
	charName 1 : string #角色名
	grade 2 : integer   #段位
	score 3 : integer   #积分
	country 4 : integer  #国家
	level 5 : integer   #玩家等级
	job   6 : integer   #职业
	praiseTotal 7 : integer #点赞数
	guildName 8 : string #帮会名称
	occurtime 9 : integer #达成时间
}
#每个段位的排行
.GradeRankList
{
	grade 0 : integer #段位 1-6对应各个段位，7代表总榜
	rank 1 : integer  #当前玩家在此段位排行中的排名 0代表不在榜中
	ranklist 2 : *CharInfo #排行
}
#请求排行榜信息
.C2G_GET_ARENA_RANKLIST
{
	
}
#应答
.G2C_GET_ARENA_RANKLIST
{
	ranklist 0 : *GradeRankList
	playerscore 1 : integer #当前玩家的积分
	mygrade 2 : integer #当前自己的段位
}
#获取当前赛季的排行信息
.B2D_GET_ARENA_RANKLIST
{
	seasonid 0 : integer #赛季ID
}
.D2B_GET_ARENA_RANKLIST
{
	info 0 : *CharInfo
	packetSum 1 : integer
}
#竞技场栏位的购买信息
.ArenaShopItem
{
	pos 0 : integer					#栏位
	dailyBuyTimes 1 : integer		#当天(游戏的天,不是自然日)的购买次数
	historyBuyTimes 2 : integer		#历史累计购买次数
}
#请求竞技场商城信息
.C2G_GET_ARENA_SHOP_INFO
{
}
#应答
.G2C_GET_ARENA_SHOP_INFO
{
	shopItem 0 : *ArenaShopItem		#各个栏位的购买情况
}

#竞技场商城购买(应答包含:处理结果 + 物品变更通知 + G2C_GET_ARENA_SHOP_INFO)
.C2G_BUY_ARENA_SHOP_ITEM
{
	pos 0 : integer			#栏位
	count 1 : integer		#购买数量
}

#开始竞技场比赛倒计时
.G2C_START_MATCH_DOUNTDOWN
{
}
#保存排行信息
.B2D_RANKLIST_SAVE
{
	seasonId 0 : integer #赛季ID
	info 1 : *CharInfo   #排行信息
}
#发送给MapRuleArena的玩家信息
.B2M_ARENA_PLAYER_INFOS
{
	arenaInstID   0 : integer  #竞技场map实例ID
	team1IDs      1 : *integer #竞技场队伍1的玩家ID列表
	team2IDs      2 : *integer #竞技场队伍2的玩家ID列表
	team1Scores   3 : *integer #竞技场队伍1的玩家积分信息
	team2Scores   4 : *integer #竞技场队伍2的玩家积分信息
	team1Count    5 : integer  #竞技场队伍1人数
	team2Count    6 : integer  #竞技场队伍2人数
	team1AvgScore 7 : integer  #竞技场队伍1平均积分
	team2AvgScore 8 : integer  #竞技场队伍2平均积分
	team1Rewards  9 : *integer #竞技场队伍1可以获得奖励的ID
	team2Rewards 10 : *integer #竞技场队伍2可以获得奖励的ID
}
