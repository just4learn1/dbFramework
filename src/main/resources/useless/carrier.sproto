#载具相关协议

#客户端申请开始累计进度条
.C2G_CARRIER_REQ_PROGRESS
{
	carrierGuid 0 : integer
}

#客户端申请登上载具(在客户端本地检测已经累计好进度后发送)
.C2G_CARRIER_REQ_ON_BOARD
{
	carrierGuid 0 : integer  # 载具guid
	isMain 1 : boolean		 # 是主驾还是副驾
}

#服务器告知客户端进度累计失败
.G2C_CARRIER_PROGRESS_FAIL
{
	carrierGuid 0 : integer
	reason 1 : integer
}

#载具状态同步(向全体发送,各种操作导致载具变化时都会发送这个结构)
.G2C_CARRIER_SYNC
{
	carrierGuid 0 : integer		# 载具guid
	syncReason 1 : integer		# 1:主驾登上 2:副驾驶登上 3:副驾驶被踢下 4:主驾驶下车(载具被击杀也是此消息)
	pilotGuid 2 : integer		# 主驾驶guid 展示上根据syncReason酌情使用
	copilotGuid 3 : integer		# 副驾驶guid 
	shouldDestroy 4 : boolean   # 是否应该销毁载具
}

#主驾申请将副驾踢开
.C2G_CARRIER_REQ_COPILOT_KICKOFF{}

#服务器告知副驾 他已被主驾踢开
.G2C_CARRIER_NTF_COPILOT_KICKOFF{}

#申请下车
.C2G_CARRIER_GET_OFF{}


#-------------------------------附:载具交互流程
#载具交互网络消息完整流程
# 1.玩家接近载具后，如果符合登上条件（阵营，载具当前状态，距离），会出现登上的UI提示。
# 2.玩家点击后，会向服务器发送消息申请开始累计登上进度，服务器发送应答消息。  收到应答之后开始走进度条（UI展示上可以考虑在发送时就开始展示累计） 。
# 3.进度条中途被破坏（受控制型攻击，别人已经登上载具），服务器会推送累计结果（失败）消息，客户端停止进度展示。   客户端也可以主动放弃累计，此时不需要向服务器发送消息。
# 4.进度条过N秒后完成，客户端向服务器再发送确认登上消息，告知服务器进度条完成。   服务器进行验证，成功后服务器发送应答消息。
# 5.如果玩家成功登上载具，服务器会向区域内全体玩家发送广播，告知玩家登上载具。  客户端基于此消息进行展示上的变化。
# 6.副驾驶登录也有进度条，但是进度条时间很短，UI上快速展示一下，然后直接向服务器发送申请随乘消息。  服务器验证成功后，先发送应答，如果成功然后对区域内全体玩家发送广播，客户端做展示。
# 7.已经登上载具的副驾驶可以主动下车。服务器收到请求后，发送广播消息。
# 8.主驾驶也可以主动下车，主驾驶主动下车后，载具一并销毁，服务器收到请求后，发送广播消息。
