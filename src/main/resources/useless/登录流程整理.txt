登录流程整理：

一：数据按二机制包传送，格式为：包长+包内容，如下：
   -------------------------------------
   | 2个字节的包长度(网络序:bigEndian) |
   -------------------------------------
   | 上述长度的包内容(littleEndian)    |
   -------------------------------------

   包内容的格式：
   -------------------------
   | 2个字节的命令(Opcode) |
   -------------------------
   | 随命令变化的内容      |
   -------------------------

   字符串为UTF8编码，格式为：2个字节的长度+字符串内容

1. 客户端发送如下消息：
    CMSG_LOGIN_USER(opcode为15)
	*** uint32 sequence      //如果服务器开启序号验证，则在这里发送一个序号（可以客户端生成）
    string host;         //host为服务器标示，测试阶段用t1替代
    string verifyCode;   //验证码
    string userName      //用户名
    string password      //密码
    uint64 accountId;    //帐户id，如果这个信息有效，优先校验
    string sessionKey;   //帐户id对应的临时密码
    uint8  bReconnect;   //是否重连 0:不重连 非0重连
	  uint32 version;      //版本信息
	
	服务器收到如下消息：
	SMSG_LOGIN_USER(opcode为16)
	*** uint32 sequence  //如果服务器开启序号验证，则返回这个，以后消息带的序号需要由这个返回的序号来生成
    uint16 result        //0为成功否则为失败代码
    uint64 accountId;    //账号ID
    string sessionKey;   //临时验证串
    uint32 unixtime      //服务器当前时间(从1970年后的秒数)
    uint32 queueCount;   //当前在排队队列里的位置，0表示不需排队
	
2. 客户端发送如下消息：
	C2L_ROLE_LIST(opcode为19，加载角色列表)
	*** uint32 sequence          //如果服务器开启序号验证，则在这里发送一个序号
	
	服务器收到如下消息：
	C2L_ROLE_LIST(opcode为20，返回角色列表信息)
	uint16 role_count            //角色个数，如果没有角色，则为0
	repeat
		uint64 account_id        //账号ID
		uint32 char_id           //角色ID
		string name              //角色姓名
		uint8  job               //角色职业
		uint8  level             //角色等级
		uint32 exp							 //经验
		uint32 last_login_time   //最近登录时间
		uint32 deleteTime        //删除时间
		uint32  mapId             //地图ID
		float  pixelX            //坐标点X
		float  pixelY            //坐标点Y
		//后续需要增加影响人物外观的一些数据
		//神器：翅膀、武器、铠甲 （目前还没有做，暂不处理）
		//这个版本只加发型和脸型
		uint16 hairid							//头发
		uint16 faceid							//人脸
	end 
	
3. 如果角色列表返回0个角色，则需要重新创建一个角色
	客户端发送如下消息：
	C2L_ROLE_CREATE(opcode为21，创建角色)
	*** uint32 sequence      //如果服务器开启序号验证，则在这里发送一个序号
    string name;             //角色名称
    uint8  class;            //职业
    string channel;          //渠道
    string dev;              //设备
    string openId;           //openid
	  uint16 hairid							//头发
		uint16 faceid							//人脸
		
	服务器收到如下消息：
	L2C_ROLE_CREATE(opcode为22，创建角色返回结果)
    uint16  ret               //0:成功 1:名字长度不符 2:有过滤字符 3:该名称已存在 4:角色列表已满
    uint64 accountId         //账号id
    uint32 id                //角色id
    string name              //角色名称
    uint8  class             //职业
    uint8  level             //等级
	  uint32 mapId             //地图ID
	  float  pixelX            //坐标点X
	  float  pixelY            //坐标点Y
	  uint16 hairid							//头发
		uint16 faceid							//人脸
	
4. 选择某个角色
	客户端发送如下消息：
	C2L_ROLE_SELECT(opcode为17，选定了某个角色来进入游戏，在登录成功后，需要用选择的角色的信息在客户端生成一个玩家)
    *** uint32 sequence      //如果服务器开启序号验证，则在这里发送一个序号
	uint32 char_id           //角色ID
    string dev               //设备信息 

	
	服务器收到如下消息：
	L2C_ROLE_SELECT(opcode为18，选择某个角色的结果)
    uint16 result      //0为成功，否则为失败代码，非0情况下会返回("H", errorcode)
    string ip          //游戏服务器的ip
    uint16 port        //游戏服务器的port
    string sessionKey; //游戏服务器的tmpPasswd
	
5. 登录（用L2C_ROLE_SELECT返回的ip/port，重新建立socket连接）
	客户端发送如下消息：
	CMSG_LOGIN(opcode为11，以某个角色登录)
	*** uint32 sequence      //如果服务器开启序号验证，则在这里发送一个序号
    string host;             //登录服务器的host信息，测试时候写成t1
    uint64 accountId;        //账号ID       
    string sessionKey;       //游戏服务器的tmpPasswd
	
	服务器返回如下消息：
	SMSG_LOGIN(opcode为12，返回登陆结果)
	*** uint32 sequence      //如果服务器开启序号验证，则返回这个，以后消息带的序号需要由这个返回的序号来生成
    uint16 result            //0 为成功否则为失败代码
    uint32 unixtime          //服务器当前时间(从1970年后的秒数) 
	
	
	
6.	删除一个角色(opcode为23)
		客户端发送：C2L_ROLE_DELETE	
    uint32  id                 //角色id

		服务器应答：L2C_ROLE_DELETE(opcode为24)
		uint16  ret                //0:成功 其他失败
		uint32  delete_time        //删除时间
		uint32  id                 //角色id
		
7. 恢复角色
		客户端发送：C2L_ROLE_RECOVER(opcode为27)
    uint32 id                //角色id

		服务器应答：L2C_ROLE_ RECOVER(opcode为28)
		uint16  ret               //0:成功 其他失败
		uint32  id                //角色id


8. 登出
	客户端发送：CMSG_LOGOUT
	*** uint32 sequence      //如果服务器开启序号验证，则在这里发送一个序号 
	
	正常情况下服务端收到这个消息是不会回消息给客户端的。客户端自行关闭socket销毁即可。

9. 登出
	服务端发送: SMSG_LOGOUT
	uint16 errorcode	被踢下线的原因，登陆时一些出错回的就是这个消息
	只有当服务端处理过程中需要将玩家踢下线时，发送给客户端这个消息。



附：生成序列号的方法
def getNewSeq(res_seq):
    res_seq = (res_seq * 125 + 3) % 0x2AAAAB
    h = (res_seq & 0xFFFF) << 0x10
    res_seq = (res_seq * 125 + 3) % 0x2AAAAB
    l = (res_seq & 0xFFFF)

    return (h | l), res_seq